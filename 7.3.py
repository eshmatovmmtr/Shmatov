# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
class Cage:
    def __init__(self, n):
        self.n = int(n)

    def __add__(self, other):
        return Cage(self.n + other.n)

    def __sub__(self, other):
        if self.n - other.n > 0:
            return Cage(self.n - other.n)
        else:
            print("Ошибка!")

    def __mul__(self, other):
        return Cage(self.n * other.n)

    def __truediv__(self, other):
        return Cage(self.n // other.n)

    def make_order(self, p):
        return (("*" * p) + '\n') * (self.n // p) + "*" * (self.n % p)


cage1 = Cage(15)
cage2 = Cage(10)
# print(cage1.make_order(5))
s = cage1 + cage2
print(f"Сумма:\n{s.make_order(5)}")
m = cage1 - cage2
print(f"Разница:\n{m.make_order(1)}")
u = cage1 * cage2
print(f"Произведение:\n{u.make_order(15)}")
d = cage1 / cage2
print(f"Частное:\n{d.make_order(1)}")
